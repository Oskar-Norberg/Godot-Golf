[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://bmv3rcl255juf"]

[ext_resource type="Texture2D" uid="uid://cpc3ugdctwoww" path="res://assets/materials/booster_pad/booster_pad.png" id="1_bajy1"]

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_airuh"]
output_port_for_preview = 0
parameter_name = "TextureParameterTriplanar"
texture_repeat = 1

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_iplsr"]
texture = ExtResource("1_bajy1")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_y8mc7"]
input_name = "time"

[sub_resource type="VisualShaderNodeIntConstant" id="VisualShaderNodeIntConstant_vcu13"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D tex_frg_3;
uniform sampler2D TextureParameterTriplanar : repeat_enable;


// TextureParameterTriplanar
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// TextureParameterTriplanar
	{
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
}

void fragment() {
// Texture2D:3
	vec4 n_out3p0 = texture(tex_frg_3, UV);


// Input:4
	float n_out4p0 = TIME;


// TextureParameterTriplanar:2
	vec4 n_out2p0 = triplanar_texture(TextureParameterTriplanar, vec3(n_out3p0.xyz), vec3(n_out4p0));


// IntConstant:5
	int n_out5p0 = 0;


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	METALLIC = float(n_out5p0);
	ROUGHNESS = float(n_out5p0);
	SPECULAR = float(n_out5p0);
	EMISSION = vec3(float(n_out5p0));


}
"
graph_offset = Vector2(-468.881, -90.7498)
nodes/fragment/0/position = Vector2(160, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeTextureParameterTriplanar_airuh")
nodes/fragment/2/position = Vector2(-400, -20)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_iplsr")
nodes/fragment/3/position = Vector2(-680, 20)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_y8mc7")
nodes/fragment/4/position = Vector2(-720, 260)
nodes/fragment/5/node = SubResource("VisualShaderNodeIntConstant_vcu13")
nodes/fragment/5/position = Vector2(0, 320)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 0, 5, 5, 0, 0, 4, 5, 0, 0, 3, 5, 0, 0, 2)
